"""MCP GitHub Client for analyzing and generating code."""

import argparse
import os
from pathlib import Path

import requests
from dotenv import load_dotenv
from github import Github
from github.GithubException import GithubException

load_dotenv()

# GitHub configuration
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_NAME = os.getenv("GITHUB_REPO")
gh = Github(GITHUB_TOKEN)
repo = gh.get_repo(REPO_NAME)

# MCP server URL
MCP_SERVER_URL = "http://localhost:5000"


def analyze_pull_request(pr_number: int) -> None:
    """Analyze a pull request using the MCP server.

    Args:
        pr_number: The pull request number to analyze.
    """
    response = requests.post(
        f"{MCP_SERVER_URL}/api/pr/analyze",
        json={"pr_number": pr_number},
    )
    if response.status_code == 200:
        result = response.json()
        print(f"\n=== Analysis for PR #{pr_number} ===\n")
        print(result["analysis"])

        # Optional: Add the analysis as a comment to the PR
        add_comment = input("\nAdd this analysis as a comment to the PR? (y/n): ")
        if add_comment.lower() == "y":
            pr = repo.get_pull(pr_number)
            pr.create_issue_comment(f"## MCP Analysis\n\n{result['analysis']}")
            print("Comment added to PR.")
    else:
        print(f"Error: {response.status_code}")
        print(response.text)


def generate_code(description: str, file_path: str) -> None:
    """Generate code using the MCP server.

    Args:
        description: Description of the code to generate.
        file_path: Target file path for the generated code.
    """
    response = requests.post(
        f"{MCP_SERVER_URL}/api/code/generate",
        json={"description": description, "file_path": file_path},
    )

    if response.status_code == 200:
        result = response.json()
        print(f"\n=== Generated Code for {file_path} ===\n")
        print(result["generated_code"])

        # Optional: Create a new branch and PR with the generated code
        create_pr = input("\nCreate a new branch and PR with this code? (y/n): ")
        if create_pr.lower() == "y":
            # Create a new branch
            file_stem = Path(file_path).stem
            branch_name = f"mcp-generated-{file_stem}"
            source = repo.get_branch("main")  # Assume main is the default branch

            try:
                repo.get_branch(branch_name)
                print(f"Branch {branch_name} already exists.")
            except GithubException:
                # Create branch
                repo.create_git_ref(f"refs/heads/{branch_name}", source.commit.sha)
                print(f"Created branch: {branch_name}")

            try:
                # Create or update file in the branch
                try:
                    contents = repo.get_contents(file_path, ref=branch_name)
                    repo.update_file(
                        contents.path,
                        f"Update {file_path} via MCP",
                        result["generated_code"],
                        contents.sha,
                        branch=branch_name,
                    )
                except GithubException:
                    repo.create_file(
                        file_path,
                        f"Create {file_path} via MCP",
                        result["generated_code"],
                        branch=branch_name,
                    )

                # Create PR
                pr = repo.create_pull(
                    title=f"MCP Generated: {file_path}",
                    body=(
                        "This PR was generated by MCP based on the description:\n\n"
                        f"{description}"
                    ),
                    head=branch_name,
                    base="main",  # Assume main is the default branch
                )
                print(f"Created PR #{pr.number}: {pr.html_url}")
            except GithubException as e:
                print(f"Error creating PR: {e}")
    else:
        print(f"Error: {response.status_code}")
        print(response.text)


def create_review_checklist(pr_number: int) -> None:
    """Create a review checklist for a PR using the MCP context.

    Args:
        pr_number: The pull request number to create a checklist for.
    """
    pr = repo.get_pull(pr_number)
    files = list(pr.get_files())

    # Simple heuristic to detect test files
    has_tests = any("test" in file.filename.lower() for file in files)

    checklist = [
        "## MCP-Generated Review Checklist",
        "",
        "### Code Quality",
        "- [ ] Code follows project style guidelines",
        "- [ ] Documentation is updated",
        "- [ ] Tests are " + ("included" if has_tests else "missing - add tests"),
        "",
        "### Security",
        "- [ ] Input validation is properly implemented",
        "- [ ] No hardcoded secrets or credentials",
        "",
        "### Performance",
        "- [ ] No obvious performance issues",
        "- [ ] Database queries are optimized",
        "",
        "### Files changed:",
    ]

    for file in files:
        checklist.append(f"- {file.filename} (+{file.additions}/-{file.deletions})")

    checklist_text = "\n".join(checklist)

    print(f"\n=== Review Checklist for PR #{pr_number} ===\n")
    print(checklist_text)

    add_comment = input("\nAdd this checklist as a comment to the PR? (y/n): ")
    if add_comment.lower() == "y":
        pr.create_issue_comment(checklist_text)
        print("Checklist added to PR.")


def main() -> None:
    """Main entry point for the MCP GitHub Client."""
    parser = argparse.ArgumentParser(description="MCP GitHub Client")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")

    # PR analysis command
    analyze_parser = subparsers.add_parser("analyze-pr", help="Analyze a pull request")
    analyze_parser.add_argument("pr_number", type=int, help="Pull request number")

    # Code generation command
    generate_parser = subparsers.add_parser("generate-code", help="Generate code")
    generate_parser.add_argument("description", help="Code description")
    generate_parser.add_argument("file_path", help="Target file path")

    # Review checklist command
    checklist_parser = subparsers.add_parser(
        "create-checklist",
        help="Create a review checklist",
    )
    checklist_parser.add_argument("pr_number", type=int, help="Pull request number")

    args = parser.parse_args()

    if args.command == "analyze-pr":
        analyze_pull_request(args.pr_number)
    elif args.command == "generate-code":
        generate_code(args.description, args.file_path)
    elif args.command == "create-checklist":
        create_review_checklist(args.pr_number)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
